=begin
#Alfresco Content Services REST API

#**Core API**  Provides access to the core features of Alfresco Content Services. 

OpenAPI spec version: 1

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.2.3

=end

require 'date'

module AlfrescoAPI

  class PersonBodyUpdate
    attr_accessor :first_name

    attr_accessor :last_name

    attr_accessor :description

    attr_accessor :email

    attr_accessor :skype_id

    attr_accessor :google_id

    attr_accessor :instant_message_id

    attr_accessor :job_title

    attr_accessor :location

    attr_accessor :company

    attr_accessor :mobile

    attr_accessor :telephone

    attr_accessor :user_status

    attr_accessor :enabled

    attr_accessor :email_notifications_enabled

    attr_accessor :password

    attr_accessor :old_password

    attr_accessor :aspect_names

    attr_accessor :properties


    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'first_name' => :'firstName',
        :'last_name' => :'lastName',
        :'description' => :'description',
        :'email' => :'email',
        :'skype_id' => :'skypeId',
        :'google_id' => :'googleId',
        :'instant_message_id' => :'instantMessageId',
        :'job_title' => :'jobTitle',
        :'location' => :'location',
        :'company' => :'company',
        :'mobile' => :'mobile',
        :'telephone' => :'telephone',
        :'user_status' => :'userStatus',
        :'enabled' => :'enabled',
        :'email_notifications_enabled' => :'emailNotificationsEnabled',
        :'password' => :'password',
        :'old_password' => :'oldPassword',
        :'aspect_names' => :'aspectNames',
        :'properties' => :'properties'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'first_name' => :'String',
        :'last_name' => :'String',
        :'description' => :'String',
        :'email' => :'String',
        :'skype_id' => :'String',
        :'google_id' => :'String',
        :'instant_message_id' => :'String',
        :'job_title' => :'String',
        :'location' => :'String',
        :'company' => :'Company',
        :'mobile' => :'String',
        :'telephone' => :'String',
        :'user_status' => :'String',
        :'enabled' => :'BOOLEAN',
        :'email_notifications_enabled' => :'BOOLEAN',
        :'password' => :'String',
        :'old_password' => :'String',
        :'aspect_names' => :'Array<String>',
        :'properties' => :'Hash<String, String>'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}){|(k,v), h| h[k.to_sym] = v}

      if attributes.has_key?(:'firstName')
        self.first_name = attributes[:'firstName']
      end

      if attributes.has_key?(:'lastName')
        self.last_name = attributes[:'lastName']
      end

      if attributes.has_key?(:'description')
        self.description = attributes[:'description']
      end

      if attributes.has_key?(:'email')
        self.email = attributes[:'email']
      end

      if attributes.has_key?(:'skypeId')
        self.skype_id = attributes[:'skypeId']
      end

      if attributes.has_key?(:'googleId')
        self.google_id = attributes[:'googleId']
      end

      if attributes.has_key?(:'instantMessageId')
        self.instant_message_id = attributes[:'instantMessageId']
      end

      if attributes.has_key?(:'jobTitle')
        self.job_title = attributes[:'jobTitle']
      end

      if attributes.has_key?(:'location')
        self.location = attributes[:'location']
      end

      if attributes.has_key?(:'company')
        self.company = attributes[:'company']
      end

      if attributes.has_key?(:'mobile')
        self.mobile = attributes[:'mobile']
      end

      if attributes.has_key?(:'telephone')
        self.telephone = attributes[:'telephone']
      end

      if attributes.has_key?(:'userStatus')
        self.user_status = attributes[:'userStatus']
      end

      if attributes.has_key?(:'enabled')
        self.enabled = attributes[:'enabled']
      end

      if attributes.has_key?(:'emailNotificationsEnabled')
        self.email_notifications_enabled = attributes[:'emailNotificationsEnabled']
      end

      if attributes.has_key?(:'password')
        self.password = attributes[:'password']
      end

      if attributes.has_key?(:'oldPassword')
        self.old_password = attributes[:'oldPassword']
      end

      if attributes.has_key?(:'aspectNames')
        if (value = attributes[:'aspectNames']).is_a?(Array)
          self.aspect_names = value
        end
      end

      if attributes.has_key?(:'properties')
        if (value = attributes[:'properties']).is_a?(Array)
          self.properties = value
        end
      end

    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properies with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      return invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          first_name == o.first_name &&
          last_name == o.last_name &&
          description == o.description &&
          email == o.email &&
          skype_id == o.skype_id &&
          google_id == o.google_id &&
          instant_message_id == o.instant_message_id &&
          job_title == o.job_title &&
          location == o.location &&
          company == o.company &&
          mobile == o.mobile &&
          telephone == o.telephone &&
          user_status == o.user_status &&
          enabled == o.enabled &&
          email_notifications_enabled == o.email_notifications_enabled &&
          password == o.password &&
          old_password == o.old_password &&
          aspect_names == o.aspect_names &&
          properties == o.properties
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [first_name, last_name, description, email, skype_id, google_id, instant_message_id, job_title, location, company, mobile, telephone, user_status, enabled, email_notifications_enabled, password, old_password, aspect_names, properties].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map{ |v| _deserialize($1, v) } )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = AlfrescoAPI.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map{ |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
